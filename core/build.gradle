import me.champeau.gradle.japicmp.JapicmpTask
import io.micronaut.build.internal.japicmp.RemovedPackages

plugins {
    id "io.micronaut.build.internal.convention-core-library"
    id 'org.checkerframework' version '0.6.30'
}

apply plugin: 'org.checkerframework'

repositories {
    mavenLocal()
}

checkerFramework {
    checkers = [
            'edu.ucr.cs.riple.taint.ucrtainting.UCRTaintingChecker',
    ]
    extraJavacArgs = [
            "-AannotatedPackages=io.micronaut",
            "-AenableLibraryCheck",
            "-AenableSideEffect",
            "-nowarn",
            "-AsuppressWarnings"
    ]
    skipCheckerFramework = true
}

micronautBuild {
    core {
        documented = false
    }
}

dependencies {
    compileOnly libs.managed.jakarta.annotation.api
    compileOnly libs.graal
    compileOnly libs.managed.kotlin.stdlib
    checkerFramework 'org.checkerframework:checker:3.37.1-SNAPSHOT'
    compileOnly 'org.checkerframework:checker-qual:3.37.1-SNAPSHOT'

    annotationProcessor 'edu.ucr.cs.riple.taint:ucrtainting-checker:0.1'
    compileOnly 'edu.ucr.cs.riple.taint:ucrtainting-checker-qual:0.1'
}

spotless {
    java {
        targetExclude '**/io/micronaut/core/io/scan/AnnotationClassReader.java',
                '**/io/micronaut/core/io/scan/Attribute.java',
                '**/io/micronaut/core/io/scan/Context.java',
                '**/io/micronaut/core/util/clhm/**',
                '**/io/micronaut/core/util/AntPathMatcher.java'
    }
    format 'javaMisc', {
        targetExclude '**/io/micronaut/core/util/clhm/**'
    }
}

def versionInfo = tasks.register("micronautVersionInfo", WriteProperties) {
    outputFile = "${buildDir}/resources/version/micronaut-version.properties"
    property 'micronaut.version', projectVersion
}
tasks.named("processResources") {
    from(versionInfo)
}

tasks.withType(JapicmpTask).configureEach {
   richReport {
       addViolationTransformer(RemovedPackages, [prefixes: ['io.micronaut.caffeine'], exact: []])
   }
}
