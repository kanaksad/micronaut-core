plugins {
    id "io.micronaut.build.internal.convention-library"
    id "org.jetbrains.kotlin.jvm"
    id 'org.checkerframework' version '0.6.30'
}

apply plugin: 'org.checkerframework'

repositories {
    mavenLocal()
}

checkerFramework {
    checkers = [
            'org.checkerframework.checker.tainting.TaintingChecker',
    ]
    skipCheckerFramework = true
}

dependencies {
    api project(":inject-kotlin")
    api libs.managed.groovy
    api(libs.spock) {
        exclude module:'groovy-all'
    }
    if (!JavaVersion.current().isJava9Compatible()) {
        api files(org.gradle.internal.jvm.Jvm.current().toolsJar)
    }
    api(libs.managed.ksp.api)
    api(libs.managed.ksp)
    implementation(libs.managed.kotlin.compiler.embeddable)
    implementation "com.squareup.okio:okio:3.3.0"
    implementation "io.github.classgraph:classgraph:4.8.149"
    checkerFramework 'org.checkerframework:checker:3.37.1-SNAPSHOT'
    implementation 'org.checkerframework:checker-qual:3.37.1-SNAPSHOT'
    testImplementation libs.javax.persistence
    testImplementation project(":runtime")
    api libs.blaze.persistence.core
    implementation libs.managed.kotlin.stdlib
}

tasks.named("sourcesJar") {
    from "$projectDir/src/main/groovy"
    from "$projectDir/src/main/kotlin"
}

tasks.named("compileKotlin") {
    kotlinOptions {
        jvmTarget = "17"
    }
}

tasks.named("compileGroovy") {
    // this allows groovy to access kotlin classes.
    dependsOn tasks.getByPath('compileKotlin')
    classpath += files(compileKotlin.destinationDirectory)
}

tasks.named("test", Test) {
    if(JavaVersion.current().majorVersion.toInteger() >= 17) {
        jvmArgs(
                '--add-opens', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
                '--add-opens', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
                '--add-opens', 'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
                '--add-opens', 'jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED',
                '--add-opens', 'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
                '--add-opens', 'jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
                '--add-opens', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                '--add-opens', 'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
                '--add-opens', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
                '--add-opens', 'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED'
        )
    }
}
