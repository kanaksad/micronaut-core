plugins {
    id 'io.micronaut.build.internal.convention-base'
    id "me.champeau.jmh" version "0.7.1"
    id 'org.checkerframework' version '0.6.30'
}

apply plugin: 'org.checkerframework'

repositories {
    mavenLocal()
}

checkerFramework {
    checkers = [
            'org.checkerframework.checker.tainting.TaintingChecker',
    ]
    skipCheckerFramework = true
}
dependencies {
    annotationProcessor project(":inject-java")
    jmhAnnotationProcessor project(":inject-java")
    jmhAnnotationProcessor libs.bundles.asm
    jmhAnnotationProcessor libs.jmh.generator.annprocess

    annotationProcessor platform(libs.test.boms.micronaut.validation)
    annotationProcessor (libs.micronaut.validation.processor) {
        exclude group: 'io.micronaut'
    }

    compileOnly platform(libs.test.boms.micronaut.validation)
    compileOnly (libs.micronaut.validation) {
        exclude group: 'io.micronaut'
    }

    api project(":inject")
    api project(":inject-java-test")
    api project(":http-server")
    api project(":http-server-netty")
    api project(":jackson-databind")
    api project(":router")
    api project(":runtime")

    api platform(libs.test.boms.micronaut.validation)
    api (libs.micronaut.validation) {
        exclude group: 'io.micronaut'
    }

    checkerFramework 'org.checkerframework:checker:3.37.1-SNAPSHOT'
    implementation 'org.checkerframework:checker-qual:3.37.1-SNAPSHOT'

    jmh libs.jmh.core
}
jmh {
    includes = ['io.micronaut.http.server.StartupBenchmark']
    duplicateClassesStrategy = DuplicatesStrategy.WARN
}

tasks.named("processJmhResources") {
    duplicatesStrategy = DuplicatesStrategy.WARN
}
['spotlessJavaCheck', 'checkstyleMain', 'checkstyleJmh'].each {
    tasks.named(it) {
        enabled = false
    }
}
